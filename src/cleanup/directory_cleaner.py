"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ clean.py –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import re
import shutil
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Tuple
import logging

from config.settings import settings


class DirectoryCleaner:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏."""
    
    def __init__(self, base_dir: str = "/app/node_logs"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
        
        Args:
            base_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        """
        self.base_dir = Path(base_dir).expanduser().resolve()
        self.logger = logging.getLogger(__name__)
        
        # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–ø–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã yyyyMMdd
        self.date_pattern = re.compile(r"^\d{8}$")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        self.cleanup_interval_hours = 1  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.file_retention_hours = 1    # –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ —É–¥–∞–ª—è—é—Ç—Å—è
        
    async def cleanup_async(self) -> Tuple[int, int]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
        
        Returns:
            Tuple[int, int]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        """
        try:
            self.logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.base_dir}")
            
            if not self.base_dir.exists():
                self.logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.base_dir}")
                return 0, 0
            
            now = datetime.now()
            today_str = now.strftime("%Y%m%d")
            one_hour_ago = now - timedelta(hours=self.file_retention_hours)
            
            removed_dirs = 0
            removed_files = 0
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞—Ç–∞–º–∏
            date_directories = await self._find_date_directories_async()
            
            for dir_path in date_directories:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø—É—Ç–∏)
                dir_name = dir_path.name
                
                try:
                    dir_date = datetime.strptime(dir_name, "%Y%m%d").date()
                except ValueError:
                    continue
                
                # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞—Ç–∞–º–∏
                if dir_date < now.date():
                    self.logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path}")
                    await self._remove_directory_async(dir_path)
                    removed_dirs += 1
                    continue
                
                # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ø–∞–ø–∫–æ–π
                # –ù–ï –¢–†–û–ì–ê–ï–ú —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ñ–∞–π–ª—ã - –Ω–æ–¥–∞ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å!
                # if dir_name == today_str:
                #     files_removed = await self._cleanup_today_directory_async(dir_path, one_hour_ago)
                #     removed_files += files_removed
            
            self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {removed_dirs} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, {removed_files} —Ñ–∞–π–ª–æ–≤")
            return removed_dirs, removed_files
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
            raise
    
    async def _list_directory_async(self) -> List[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            loop = asyncio.get_event_loop()
            entries = await loop.run_in_executor(None, os.listdir, str(self.base_dir))
            return entries
        except OSError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {self.base_dir}: {e}")
            return []
    
    async def _find_date_directories_async(self) -> List[Path]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã yyyyMMdd."""
        date_directories = []
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            loop = asyncio.get_event_loop()
            
            def find_directories():
                directories = []
                for root, dirs, files in os.walk(self.base_dir):
                    for dir_name in dirs:
                        if self.date_pattern.match(dir_name):
                            dir_path = Path(root) / dir_name
                            directories.append(dir_path)
                return directories
            
            date_directories = await loop.run_in_executor(None, find_directories)
            self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(date_directories)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –¥–∞—Ç–∞–º–∏")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –¥–∞—Ç–∞–º–∏: {e}")
        
        return date_directories
    
    async def _remove_directory_async(self, dir_path: Path) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, shutil.rmtree, str(dir_path))
        except OSError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
    
    async def _cleanup_today_directory_async(self, dir_path: Path, cutoff_time: datetime) -> int:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        
        Args:
            dir_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            cutoff_time: –í—Ä–µ–º—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Å—Ç–∞—Ä—ã–º–∏
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        removed_files = 0
        
        try:
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            for root, _, files in os.walk(dir_path):
                for file in files:
                    file_path = Path(root) / file
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                        mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
                        
                        if mtime < cutoff_time:
                            self.logger.debug(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
                            file_path.unlink()
                            removed_files += 1
                            
                    except OSError as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
        
        return removed_files
    
    async def start_periodic_cleanup_async(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤."""
        self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ {self.cleanup_interval_hours} —á–∞—Å–æ–≤")
        
        while True:
            try:
                await asyncio.sleep(self.cleanup_interval_hours * 3600)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                await self.cleanup_async()
            except asyncio.CancelledError:
                self.logger.info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def get_cleanup_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–∏—Å—Ç–∫–∏."""
        return {
            "base_directory": str(self.base_dir),
            "cleanup_interval_hours": self.cleanup_interval_hours,
            "file_retention_hours": self.file_retention_hours,
            "directory_exists": self.base_dir.exists(),
            "directory_size_mb": self._get_directory_size_mb() if self.base_dir.exists() else 0
        }
    
    def _get_directory_size_mb(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö."""
        try:
            total_size = 0
            for dirpath, dirnames, filenames in os.walk(self.base_dir):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    if os.path.exists(filepath):
                        total_size += os.path.getsize(filepath)
            return total_size / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
        except Exception:
            return 0.0
