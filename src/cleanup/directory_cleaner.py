"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ clean.py –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import re
import shutil
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Tuple
import logging

from config.settings import settings
from src.utils.logger import setup_logger


class DirectoryCleaner:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏."""
    
    def __init__(self, base_dir: str = "/app/node_logs", single_file_watcher=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∏—Ç–µ–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
        
        Args:
            base_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            single_file_watcher: –°—Å—ã–ª–∫–∞ –Ω–∞ SingleFileTailWatcher –¥–ª—è –∑–∞—â–∏—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        """
        self.base_dir = Path(base_dir).expanduser().resolve()
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —á–∏—Å–ª–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.target_cleanup_path = self.base_dir / "node_order_statuses" / "hourly"
        self.logger = setup_logger(__name__)
        self.single_file_watcher = single_file_watcher
        
        # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–ø–æ–∫ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã yyyyMMdd
        self.date_pattern = re.compile(r"^\d{8}$")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        self.cleanup_interval_hours = 1  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.file_retention_hours = 1    # –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ —É–¥–∞–ª—è—é—Ç—Å—è
        
    async def cleanup_async(self) -> Tuple[int, int]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
        
        Returns:
            Tuple[int, int]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        """
        try:
            self.logger.info(f"üßπ Starting cleanup in: {self.target_cleanup_path}")
            
            if not self.target_cleanup_path.exists():
                self.logger.warning(f"Target cleanup path does not exist: {self.target_cleanup_path}")
                return 0, 0
            
            removed_dirs = 0
            removed_files = 0
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞—Ç–∞–º–∏ –≤ target_cleanup_path
            date_directories = []
            for item in self.target_cleanup_path.iterdir():
                if item.is_dir() and self.date_pattern.match(item.name):
                    date_directories.append(item)
            
            if not date_directories:
                self.logger.info("No date directories found")
                return 0, 0
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç yyyyMMdd)
            date_directories.sort(key=lambda p: p.name, reverse=True)
            
            self.logger.info(f"Found {len(date_directories)} date directories in {self.target_cleanup_path}")
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            latest_directory = date_directories[0]
            directories_to_remove = date_directories[1:]
            
            self.logger.info(f"Keeping latest directory: {latest_directory.name}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for dir_path in directories_to_remove:
                self.logger.info(f"üóëÔ∏è Deleting old directory: {dir_path.name}")
                await self._remove_directory_async(dir_path)
                removed_dirs += 1
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            files_removed = await self._cleanup_numeric_files_async(latest_directory)
            removed_files += files_removed
            
            self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {removed_dirs} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, {removed_files} —Ñ–∞–π–ª–æ–≤")
            return removed_dirs, removed_files
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
            raise
    
    async def _remove_directory_async(self, dir_path: Path) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, shutil.rmtree, str(dir_path))
        except OSError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dir_path}: {e}")
    
    async def _cleanup_numeric_files_async(self, dir_path: Path) -> int:
        """Cleanup numeric files in directory, keeping only the last 3 files.
        
        Args:
            dir_path: Path to date directory (e.g., /app/node_logs/node_order_statuses/hourly/20251009)
            
        Returns:
            Number of files removed
        """
        removed_files = 0
        
        try:
            # Find all numeric files in directory
            numeric_files = []
            for file_path in dir_path.iterdir():
                if file_path.is_file() and file_path.name.isdigit():
                    numeric_files.append(file_path)
            
            if not numeric_files:
                self.logger.debug(f"No numeric files found in {dir_path}")
                return 0
            
            # Sort by numeric name (descending = newest first)
            numeric_files.sort(key=lambda f: int(f.name), reverse=True)
            
            self.logger.info(f"Found {len(numeric_files)} numeric files in {dir_path.name}, keeping last 3")
            
            # Keep last 3, delete the rest
            files_to_delete = numeric_files[3:]
            
            for file_path in files_to_delete:
                try:
                    self.logger.info(f"üóëÔ∏è Deleting old file: {file_path.name}")
                    loop = asyncio.get_event_loop()
                    await loop.run_in_executor(None, file_path.unlink)
                    removed_files += 1
                except OSError as e:
                    self.logger.warning(f"Failed to delete file {file_path}: {e}")
            
            if removed_files > 0:
                self.logger.info(f"‚úÖ Deleted {removed_files} old files from {dir_path.name}")
            
        except Exception as e:
            self.logger.error(f"Error cleaning up numeric files in {dir_path}: {e}")
        
        return removed_files
    
    async def start_periodic_cleanup_async(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤."""
        self.logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ {self.cleanup_interval_hours} —á–∞—Å–æ–≤")
        
        while True:
            try:
                await asyncio.sleep(self.cleanup_interval_hours * 3600)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                await self.cleanup_async()
            except asyncio.CancelledError:
                self.logger.info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def get_cleanup_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–∏—Å—Ç–∫–∏."""
        return {
            "base_directory": str(self.base_dir),
            "cleanup_interval_hours": self.cleanup_interval_hours,
            "file_retention_hours": self.file_retention_hours,
            "directory_exists": self.base_dir.exists(),
            "directory_size_mb": self._get_directory_size_mb() if self.base_dir.exists() else 0
        }
    
    def _get_directory_size_mb(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö."""
        try:
            total_size = 0
            for dirpath, dirnames, filenames in os.walk(self.base_dir):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    if os.path.exists(filepath):
                        total_size += os.path.getsize(filepath)
            return total_size / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
        except Exception:
            return 0.0
