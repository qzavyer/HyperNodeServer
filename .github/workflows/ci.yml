name: CI - Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create necessary directories
      run: |
        mkdir -p logs data config
        
    - name: Run linting
      run: |
        python -m flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 src/ --count --exit-zero --statistics
        
    - name: Run unit tests
      run: |
        python -m pytest tests/test_config_manager.py -v --tb=short
        python -m pytest tests/test_api_routes.py -v --tb=short
        
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v --tb=short --timeout=300
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          .pytest_cache/
          logs/

  security-audit:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install audit tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety bandit
        
    - name: Run pip-audit
      run: |
        echo "Running pip-audit for known vulnerabilities..."
        pip-audit --desc --format=json --output=audit-results.json || true
        pip-audit --desc
        
    - name: Run safety check
      run: |
        echo "Running safety check..."
        safety check --json --output safety-results.json || true
        safety check
        
    - name: Run bandit security linter
      run: |
        echo "Running bandit security linter..."
        bandit -r src/ -f json -o bandit-results.json || true
        bandit -r src/ -f txt
        
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: |
          audit-results.json
          safety-results.json
          bandit-results.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t hyperliquid-parser:test .
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 hyperliquid-parser:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container

  docker-security:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build image for scanning
      run: |
        docker build -t hyperliquid-parser:scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'hyperliquid-parser:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'