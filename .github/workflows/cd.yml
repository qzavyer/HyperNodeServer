name: CD - Deploy

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI - Tests"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r src/ deployment/
        cp requirements.txt deployment/
        cp run.py deployment/
        cp env.example deployment/
        cp docker-compose.yml deployment/
        cp Dockerfile deployment/
        
    - name: Deploy to staging (if configured)
      if: env.STAGING_HOST != ''
      run: |
        echo "Deploying to staging server..."
        # Add your staging deployment logic here
        # Example: rsync, scp, or SSH commands
        
    - name: Deploy to production (if configured)
      if: env.PRODUCTION_HOST != ''
      run: |
        echo "Deploying to production server..."
        # Add your production deployment logic here
        # Example: rsync, scp, or SSH commands
        
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # Add notification logic (Slack, Discord, etc.)
        
  notify:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment ready
      run: |
        echo "‚úÖ New version ready for deployment!"
        echo "üì¶ Pull latest changes: git pull origin main"
        echo "üê≥ Start application: docker compose up -d"
        echo "üîó Application will be available at: http://localhost:8000"
