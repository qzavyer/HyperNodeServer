name: CD - Continuous Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    types: [closed]
    branches: [ main, master ]
  workflow_run:
    workflows: ["CI - Continuous Integration"]
    types:
      - completed
    branches: [ main, master ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  version:
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
      (github.event.workflow_run.conclusion == 'success' || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github
      
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

  deploy:
    runs-on: ubuntu-latest
    needs: version
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
      (github.event.workflow_run.conclusion == 'success' || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r src/ deployment/
        cp requirements.txt deployment/
        cp run.py deployment/
        cp env.example deployment/
        cp docker-compose.yml deployment/
        cp Dockerfile deployment/
        
    - name: Deploy to staging
      if: vars.STAGING_HOST != ''
      run: |
        echo "Deploying to staging server..."
        # Add your staging deployment logic here
        
    - name: Deploy to production
      if: vars.PRODUCTION_HOST != ''
      run: |
        echo "Deploying to production server..."
        # Add your production deployment logic here
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üì¶ Pull latest changes: git pull origin main"
        echo "üê≥ Start application: docker compose up -d"
        echo "üîó Application will be available at: http://localhost:8000"