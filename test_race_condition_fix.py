#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è race condition."""

import asyncio
import sys
import os
from concurrent.futures import ThreadPoolExecutor
from typing import Set

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.websocket.websocket_manager import WebSocketManager
from src.storage.models import Order
from datetime import datetime


class MockWebSocket:
    """–ü—Ä–æ—Å—Ç–æ–π –º–æ–∫ WebSocket –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, connection_id: str):
        self.connection_id = connection_id
        self.messages = []
        
    async def send_text(self, message: str):
        """–ú–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        self.messages.append(message)


async def test_race_condition_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è race condition."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è race condition...")
    
    manager = WebSocketManager()
    
    # –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    websockets = [MockWebSocket(f"ws_{i}") for i in range(50)]
    for ws in websockets:
        manager.active_connections["orderUpdate"].add(ws)
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(websockets)} WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    async def modify_connections():
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏."""
        for i in range(30):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            new_ws = MockWebSocket(f"new_ws_{i}")
            manager.active_connections["orderUpdate"].add(new_ws)
            
            # –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if manager.active_connections["orderUpdate"]:
                connections_list = list(manager.active_connections["orderUpdate"])
                if connections_list:
                    manager.active_connections["orderUpdate"].discard(connections_list[0])
            
            await asyncio.sleep(0.001)
    
    async def broadcast_orders():
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        for i in range(20):
            order = Order(
                id=f"test_order_{i}",
                symbol="BTC",
                side="Bid",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º "Bid" –≤–º–µ—Å—Ç–æ "buy"
                price=50000.0 + i,
                size=1.0,
                status="open",
                timestamp=datetime.now(),
                owner="0x123"
            )
            
            try:
                # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–∫–∏ "Set changed size during iteration"
                await manager.broadcast_order_update(order)
                print(f"‚úÖ –ó–∞–∫–∞–∑ {i+1}/20 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}: {e}")
                if "Set changed size during iteration" in str(e):
                    print(f"‚ùå –û–®–ò–ë–ö–ê: Race condition –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! {e}")
                    return False
                else:
                    print(f"‚ö†Ô∏è  –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π): {e}")
            
            await asyncio.sleep(0.01)
        
        return True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    print("üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    results = await asyncio.gather(
        modify_connections(),
        broadcast_orders(),
        return_exceptions=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    broadcast_result = results[1] if len(results) > 1 else None
    
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results}")
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç broadcast: {broadcast_result}")
    
    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç True –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if broadcast_result is True or (broadcast_result is None and not any(isinstance(r, Exception) for r in results)):
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: Race condition –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(manager.active_connections['orderUpdate'])}")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: Race condition –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        print(f"üîç –û—à–∏–±–∫–∏: {[r for r in results if isinstance(r, Exception)]}")
        return False


def test_old_implementation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç–∞—Ä–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("\nüî¥ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç–∞—Ä–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:")
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    test_set: Set[int] = set(range(10))
    
    def modify_set():
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ."""
        for i in range(10, 20):
            test_set.add(i)
            if i % 2 == 0 and test_set:
                test_set.discard(next(iter(test_set)))
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É –≤–æ –≤—Ä–µ–º—è –µ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        with ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(modify_set)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É (–∏–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–¥)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –º–æ–≥–ª–æ –≤—ã–∑–≤–∞—Ç—å "Set changed size during iteration"
            for item in list(test_set):  # list() —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é - —ç—Ç–æ –Ω–∞—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                pass
            
            future.result()
        
        print("‚úÖ –° –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (list(test_set)) - –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞")
    except RuntimeError as e:
        if "Set changed size during iteration" in str(e):
            print(f"‚ùå –ë–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –æ—à–∏–±–∫–∞: {e}")
        else:
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket race condition\n")
    
    # –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    success = await test_race_condition_fix()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    test_old_implementation()
    
    print(f"\n{'='*50}")
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üí° Race condition –≤ WebSocket manager –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        print("üí• –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üêõ Race condition –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print(f"{'='*50}")


if __name__ == "__main__":
    asyncio.run(main())
