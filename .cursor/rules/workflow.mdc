---
alwaysApply: true
---
# Workflow разработки HyperLiquid Node Parser

## Основные принципы

**Строгое следование плану** - выполнение задач только в указанном порядке
**Согласование решений** - обсуждение подхода перед реализацией
**Итеративность** - пошаговое выполнение с подтверждениями
**Документирование прогресса** - обновление статуса задач

> Техническое видение: [docs/vision.md](vision.md)
> Правила кода: [docs/conventions.md](conventions.md)

## Процесс выполнения

### 1. Подготовка к итерации
- **Прочитать текущий тасклист** - понять что нужно сделать
- **Изучить требования** - ознакомиться с vision.md и conventions.md
- **Определить следующую задачу** - выбрать приоритетную задачу

### 2. Согласование решения
- **Предложить подход** - кратко описать планируемое решение
- **Показать код-отрезки** - продемонстрировать ключевые части реализации
- **Получить подтверждение** - дождаться одобрения от пользователя

### 3. Реализация
- **Создать/обновить файлы** - реализовать согласованное решение
- **Следовать conventions.md** - соблюдать правила именования и структуры
- **Писать тесты** - TDD подход, тесты перед кодом
- **Проверить работоспособность** - убедиться что код работает

### 4. Подтверждение результата
- **Показать результат** - продемонстрировать что сделано
- **Объяснить изменения** - кратко описать что реализовано
- **Получить подтверждение** - дождаться одобрения результата

### 5. Обновление прогресса
- **Отметить выполненную задачу** - обновить статус в тасклисте
- **Сделать коммит** - зафиксировать изменения в репозитории
- **Подготовить к следующей итерации** - определить следующую задачу

## Правила взаимодействия

### При предложении решения
```
**Задача**: [название задачи из тасклиста]

**Подход**: 
- Краткое описание планируемого решения
- Ключевые компоненты для реализации

**Код-отрезки**:
```python
# Пример ключевой части реализации
def main_function():
    # логика
```

**Вопросы**: 
- Уточнения по требованиям
- Альтернативные варианты

Ожидаю подтверждения для начала реализации.
```

### При демонстрации результата
```
**Выполнено**: [название задачи]

**Реализовано**:
- Создан файл X с функциональностью Y
- Добавлены тесты для Z
- Обновлена конфигурация

**Файлы изменены**:
- `src/module/file.py` - основная логика
- `tests/test_module.py` - тесты
- `requirements.txt` - зависимости

**Следующий шаг**: [следующая задача из тасклиста]

Ожидаю подтверждения для перехода к следующей задаче.
```

## Структура коммитов

### Формат сообщений
```
feat: add log parser module

- Implement LogParser class with JSON parsing
- Add tests for valid/invalid log entries
- Follow TDD approach with test-first development
- Update tasklist progress

Closes #task-1
```

### Типы коммитов
- `feat:` - новая функциональность
- `fix:` - исправление ошибок
- `test:` - добавление/обновление тестов
- `docs:` - документация
- `refactor:` - рефакторинг кода
- `config:` - изменения конфигурации

## Контроль качества

### Перед коммитом
- [ ] Код соответствует conventions.md
- [ ] Все тесты проходят
- [ ] Нет синтаксических ошибок
- [ ] Документация обновлена
- [ ] Тасклист обновлен

### При возникновении проблем
- **Остановить работу** - не продолжать без решения
- **Описать проблему** - четко сформулировать что не работает
- **Предложить варианты** - несколько способов решения
- **Получить направление** - дождаться указаний от пользователя

## Приоритеты

### Критично
1. **Следование плану** - строго по тасклисту
2. **Согласование** - всегда перед реализацией
3. **TDD подход** - тесты перед кодом
4. **KISS принцип** - простота решений

### Важно
1. **Качество кода** - соответствие conventions.md
2. **Документирование** - обновление прогресса
3. **Коммиты** - регулярное сохранение изменений
4. **Тестирование** - покрытие тестами

---

**Помни**: Лучше сделать меньше, но качественно, чем много, но плохо.
